CREATE TABLE "MEMBER" (
	"MEMBER_NO"	NUMBER		NOT NULL,
	"MEMBER_NAME"	NVARCHAR2(5)		NOT NULL,
	"MEMBER_ID"	NVARCHAR2(12)		NOT NULL,
	"MEMBER_PW"	VARCHAR2(4000)		NOT NULL,
	"MEMBER_EMAIL"	NVARCHAR2(50)		NOT NULL,
	"MEMBER_PHONE"	NVARCHAR2(11)		NOT NULL,
	"ARTIST_REG"	CHAR(1)	DEFAULT 'N'	NOT NULL,
	"MEMBER_DEL_FL"	CHAR(1)	DEFAULT 'N'	NOT NULL,
	"MEMBER_PENALTY"	NUMBER	DEFAULT 1	NOT NULL
);

COMMENT ON COLUMN "MEMBER"."MEMBER_NO" IS '회원번호(SEQ_MEMBER_NO)';

COMMENT ON COLUMN "MEMBER"."MEMBER_NAME" IS '회원이름';

COMMENT ON COLUMN "MEMBER"."MEMBER_ID" IS '아이디';

COMMENT ON COLUMN "MEMBER"."MEMBER_PW" IS '비밀번호';

COMMENT ON COLUMN "MEMBER"."MEMBER_EMAIL" IS '회원이메일';

COMMENT ON COLUMN "MEMBER"."MEMBER_PHONE" IS '회원전화번호';

COMMENT ON COLUMN "MEMBER"."ARTIST_REG" IS '직가등록여부(N,Y)';

COMMENT ON COLUMN "MEMBER"."MEMBER_DEL_FL" IS '회원탈퇴여부(N,Y)';

COMMENT ON COLUMN "MEMBER"."MEMBER_PENALTY" IS '회원패널티(1,2)';

CREATE TABLE "ARTIST" (
	"MEMBER_NO"	NUMBER		NOT NULL,
	"ARTIST_PROFILE"	NVARCHAR2(200)		NOT NULL,
	"ARTIST_NICKNAME"	NVARCHAR2(12)		NOT NULL,
	"ARTIST_PORTFOLIO"	NVARCHAR2(200)		NOT NULL,
	"ARTIST_BANK_NAME"	VARCHAR(20)		NOT NULL,
	"ARTIST_BANK_NO"	NUMBER		NOT NULL
);

COMMENT ON COLUMN "ARTIST"."MEMBER_NO" IS '작가 회원번호';

COMMENT ON COLUMN "ARTIST"."ARTIST_PROFILE" IS '작가프로필 파일명';

COMMENT ON COLUMN "ARTIST"."ARTIST_NICKNAME" IS '작가 활동명';

COMMENT ON COLUMN "ARTIST"."ARTIST_PORTFOLIO" IS '포트폴리오파일명';

COMMENT ON COLUMN "ARTIST"."ARTIST_BANK_NAME" IS '환전 은행명';

COMMENT ON COLUMN "ARTIST"."ARTIST_BANK_NO" IS '환전 은행번호';

CREATE TABLE "PIECE" (
	"PIECE_NO"	NUMBER		NOT NULL,
	"MEMBER_NO"	NUMBER		NOT NULL,
	"PIECE_RENAME"	NVARCHAR2(200)		NOT NULL,
	"PIECE_TITLE"	NVARCHAR2(200)		NOT NULL,
	"PIECE_DETAIL"	NVARCHAR2(1000)		NOT NULL,
	"SIZE_X"	NUMBER	DEFAULT 0	NOT NULL,
	"SIZE_Y"	NUMBER	DEFAULT 0	NOT NULL,
	"REG_DATE"	DATE	DEFAULT CURRENT_DATE	NOT NULL,
	"PIECE_TYPE"	NUMBER		NOT NULL,
	"PIECE_STATUS"	CHAR(1)		NOT NULL,
	"PIECE_CATEGORY_NO"	NUMBER		NOT NULL
);

COMMENT ON COLUMN "PIECE"."PIECE_NO" IS '작품번호(SEQ_PIECE_NO)';

COMMENT ON COLUMN "PIECE"."MEMBER_NO" IS '작가 회원번호';

COMMENT ON COLUMN "PIECE"."PIECE_RENAME" IS '작품 파일명';

COMMENT ON COLUMN "PIECE"."PIECE_TITLE" IS '작품 제목';

COMMENT ON COLUMN "PIECE"."PIECE_DETAIL" IS '작품 설명';

COMMENT ON COLUMN "PIECE"."SIZE_X" IS '작품크기(가로)';

COMMENT ON COLUMN "PIECE"."SIZE_Y" IS '작품크기(세로)';

COMMENT ON COLUMN "PIECE"."REG_DATE" IS '등록일';

COMMENT ON COLUMN "PIECE"."PIECE_TYPE" IS '판매종류(1 즉시판매, 2 경매)';

COMMENT ON COLUMN "PIECE"."PIECE_STATUS" IS '상태';

COMMENT ON COLUMN "PIECE"."PIECE_CATEGORY_NO" IS '카테고리번호(SEQ_CATEGORY_NO)';

CREATE TABLE "AUCTION" (
	"AUCTION"	NUMBER		NOT NULL,
	"PIECE_NO"	NUMBER		NOT NULL,
	"MEMBER_NO"	NUMBER		NOT NULL,
	"BID_DATE"	DATE	DEFAULT CURRENT_DATE	NOT NULL,
	"END_PRICE"	NUMBER		NOT NULL
);

COMMENT ON COLUMN "AUCTION"."AUCTION" IS '입찰번호(SEQ_AUCTION_NO)';

COMMENT ON COLUMN "AUCTION"."PIECE_NO" IS '작품번호';

COMMENT ON COLUMN "AUCTION"."MEMBER_NO" IS '회원번호';

COMMENT ON COLUMN "AUCTION"."BID_DATE" IS '입찰시간';

COMMENT ON COLUMN "AUCTION"."END_PRICE" IS '경매가';

CREATE TABLE "NOTIFICATION" (
	"NOTI_NO"	NUMBER		NOT NULL,
	"MEMBER_NO"	NUMBER		NOT NULL,
	"READ_CHECK"	CHAR(1)	DEFAULT 'N'	NOT NULL,
	"NOTI_CONTENT"	NVARCHAR2(1000)		NOT NULL
);

COMMENT ON COLUMN "NOTIFICATION"."NOTI_NO" IS '알림번호 (SEQ_NOTI_NO)';

COMMENT ON COLUMN "NOTIFICATION"."MEMBER_NO" IS '회원번호(SEQ_MEMBER_NO)';

COMMENT ON COLUMN "NOTIFICATION"."READ_CHECK" IS '알림 읽음여부';

COMMENT ON COLUMN "NOTIFICATION"."NOTI_CONTENT" IS '알림내용';

CREATE TABLE "DELIVERY" (
	"DELIVERY_NO"	VARCHAR2(50)		NOT NULL,
	"PIECE_NO"	NUMBER		NOT NULL,
	"MEMBER_NO"	NUMBER		NOT NULL,
	"DELIVERY_ADDRESS"	VARCHAR2(200)		NOT NULL,
	"DELIVERY_STATUS"	NUMBER		NOT NULL,
	"DELIVERY_DATE"	DATE	DEFAULT CURRENT_DATE	NOT NULL
);

COMMENT ON COLUMN "DELIVERY"."DELIVERY_NO" IS '송장번호(SEQ_DELIVERY_NO)';

COMMENT ON COLUMN "DELIVERY"."PIECE_NO" IS '작품번호(SEQ_PIECE_NO)';

COMMENT ON COLUMN "DELIVERY"."MEMBER_NO" IS '수취인';

COMMENT ON COLUMN "DELIVERY"."DELIVERY_ADDRESS" IS '배송지 주소';

COMMENT ON COLUMN "DELIVERY"."DELIVERY_STATUS" IS '배송상태';

COMMENT ON COLUMN "DELIVERY"."DELIVERY_DATE" IS '배송등록일';

CREATE TABLE "FOLLOW" (
	"MEMBER_NO"	NUMBER		NOT NULL,
	"MEMBER_NO2"	NUMBER		NOT NULL
);

COMMENT ON COLUMN "FOLLOW"."MEMBER_NO" IS '회원번호';

COMMENT ON COLUMN "FOLLOW"."MEMBER_NO2" IS '작가 회원번호';

CREATE TABLE "WISH" (
	"MEMBER_NO"	NUMBER		NOT NULL,
	"PIECE_NO"	NUMBER		NOT NULL
);

COMMENT ON COLUMN "WISH"."MEMBER_NO" IS '회원번호';

COMMENT ON COLUMN "WISH"."PIECE_NO" IS '찜 한 작품번호';

CREATE TABLE "PAYMENT_RECORD" (
	"RECORD_NO"	NUMBER		NOT NULL,
	"MEMBER_NO"	NUMBER		NOT NULL,
	"PAY_AMOUNT"	NUMBER		NOT NULL,
	"PAY_DATE"	NUMBER		NOT NULL,
	"PAY_TYPE"	NVARCHAR2(50)		NOT NULL,
	"PAY_CODE"	NUMBER		NOT NULL,
	"PIECE_NO"	NUMBER		NOT NULL
);

COMMENT ON COLUMN "PAYMENT_RECORD"."RECORD_NO" IS '결제번호';

COMMENT ON COLUMN "PAYMENT_RECORD"."MEMBER_NO" IS '회원번호';

COMMENT ON COLUMN "PAYMENT_RECORD"."PAY_AMOUNT" IS '결제금액';

COMMENT ON COLUMN "PAYMENT_RECORD"."PAY_DATE" IS '결제일자';

COMMENT ON COLUMN "PAYMENT_RECORD"."PAY_TYPE" IS '결제수단';

COMMENT ON COLUMN "PAYMENT_RECORD"."PAY_CODE" IS '결제수단번호';

COMMENT ON COLUMN "PAYMENT_RECORD"."PIECE_NO" IS '결제한 작품번호';

CREATE TABLE "REPORT" (
	"REPORT_NO"	NUMBER		NOT NULL,
	"MEMBER_NO"	NUMBER		NOT NULL,
	"PIECE_NO"	NUMBER		NOT NULL,
	"REPORT_TYPE"	NUMBER		NOT NULL,
	"REPORT_CONTENT"	NVARCHAR2(1000)		NOT NULL,
	"REPORT_DATE"	DATE	DEFAULT CURRENT_DATE	NOT NULL,
	"REPORT_READ_FL"	CHAR(1)	DEFAULT 'N'	NOT NULL,
	"REPORT_DEL_FL"	CHAR(1)	DEFAULT 'N'	NOT NULL
);

COMMENT ON COLUMN "REPORT"."REPORT_NO" IS '신고번호(SEQ_REPORT_NO)';

COMMENT ON COLUMN "REPORT"."MEMBER_NO" IS '신고자번호';

COMMENT ON COLUMN "REPORT"."PIECE_NO" IS '작품번호';

COMMENT ON COLUMN "REPORT"."REPORT_TYPE" IS '신고사유';

COMMENT ON COLUMN "REPORT"."REPORT_CONTENT" IS '신고내용';

COMMENT ON COLUMN "REPORT"."REPORT_DATE" IS '신고날자';

COMMENT ON COLUMN "REPORT"."REPORT_READ_FL" IS '읽음여부(N, Y)';

COMMENT ON COLUMN "REPORT"."REPORT_DEL_FL" IS '삭제여부(N, Y)';

CREATE TABLE "QUESTION" (
	"QUESTION_NO"	NUMBER		NOT NULL,
	"MEMBER_NO"	NUMBER		NOT NULL,
	"QUESTION_CONTENT"	NVARCHAR2(1000)		NOT NULL,
	"QUESTION_DATE"	DATE	DEFAULT CURRENT_DATE	NOT NULL,
	"QUESTION_DEL_FL"	CHAR(1)	DEFAULT 'N'	NOT NULL,
	"QUESTION_ANS_FL"	CHAR(1)	DEFAULT 'N'	NOT NULL,
	"QUESTION_ANSWER"	NVARCHAR2(1000)		NULL,
	"QUESTION_CATEGORY_NO"	NUMBER		NOT NULL
);

COMMENT ON COLUMN "QUESTION"."QUESTION_NO" IS '문의번호(SEQ_QUESTION_NO)';

COMMENT ON COLUMN "QUESTION"."MEMBER_NO" IS '회원번호';

COMMENT ON COLUMN "QUESTION"."QUESTION_CONTENT" IS '문의내용';

COMMENT ON COLUMN "QUESTION"."QUESTION_DATE" IS '문의날자';

COMMENT ON COLUMN "QUESTION"."QUESTION_DEL_FL" IS '삭제여부 (N, Y)';

COMMENT ON COLUMN "QUESTION"."QUESTION_ANS_FL" IS '답변여부 (N, Y)';

COMMENT ON COLUMN "QUESTION"."QUESTION_ANSWER" IS '답변내용';

COMMENT ON COLUMN "QUESTION"."QUESTION_CATEGORY_NO" IS '분류번호(SEQ_QUESTION_CATEGORY_NO)';

CREATE TABLE "PIECE_AUCTION" (
	"PIECE_NO"	NUMBER		NOT NULL,
	"START_DATE"	DATE		NOT NULL,
	"END_DATE"	DATE		NOT NULL,
	"START_PRICE"	NUMBER		NOT NULL,
	"HOPE_PRICE"	NUMBER		NOT NULL,
	"FINAL_PRICE"	NUMBER	DEFAULT 0	NOT NULL
);

COMMENT ON COLUMN "PIECE_AUCTION"."PIECE_NO" IS '작품번호';

COMMENT ON COLUMN "PIECE_AUCTION"."START_DATE" IS '경매 시작 시간';

COMMENT ON COLUMN "PIECE_AUCTION"."END_DATE" IS '경매종료 시간';

COMMENT ON COLUMN "PIECE_AUCTION"."START_PRICE" IS '경매 시작가';

COMMENT ON COLUMN "PIECE_AUCTION"."HOPE_PRICE" IS '상한낙찰가';

COMMENT ON COLUMN "PIECE_AUCTION"."FINAL_PRICE" IS '최종낙찰가';

CREATE TABLE "NOTICE" (
	"NOTICE_NO"	NUMBER		NOT NULL,
	"NOTICE_TITLE"	NVARCHAR2(50)		NOT NULL,
	"NOTICE_CONTENT"	NVARCHAR2(1000)		NOT NULL,
	"NOTICE_DATE"	DATE	DEFAULT CURRENT_DATE	NOT NULL,
	"NOTICE_DEL_FL"	CHAR(1)	DEFAULT 'N'	NOT NULL
);

COMMENT ON COLUMN "NOTICE"."NOTICE_NO" IS '공지사항글번호(SEQ_NOTICE_NO)';

COMMENT ON COLUMN "NOTICE"."NOTICE_TITLE" IS '공지글제목';

COMMENT ON COLUMN "NOTICE"."NOTICE_CONTENT" IS '공지글내용';

COMMENT ON COLUMN "NOTICE"."NOTICE_DATE" IS '작성일';

COMMENT ON COLUMN "NOTICE"."NOTICE_DEL_FL" IS '상태(N 작성, T 임시보관,D 삭제,)';


CREATE TABLE "PIECE_CATEGORY" (
	"PIECE_CATEGORY_NO"	NUMBER		NOT NULL,
	"PIECE_CATEGORY_NAME"	VARCHAR2(20)		NOT NULL
);

COMMENT ON COLUMN "PIECE_CATEGORY"."PIECE_CATEGORY_NO" IS '카테고리번호(SEQ_CATEGORY_NO)';

COMMENT ON COLUMN "PIECE_CATEGORY"."PIECE_CATEGORY_NAME" IS '카테고리 이름';

CREATE TABLE "QUESTION_CATEGORY" (
	"QUESTION_CATEGORY_NO"	NUMBER		NOT NULL,
	"QUESTION_CATEGORY_NAME"	NVARCHAR2(50)		NOT NULL
);

COMMENT ON COLUMN "QUESTION_CATEGORY"."QUESTION_CATEGORY_NO" IS '분류번호(SEQ_QUESTION_CATEGORY_NO)';

COMMENT ON COLUMN "QUESTION_CATEGORY"."QUESTION_CATEGORY_NAME" IS '문의종류';

CREATE TABLE "PIECE_SELL" (
	"PIECE_NO"	NUMBER		NOT NULL,
	"SELL_PRICE"	NUMBER		NOT NULL
);

COMMENT ON COLUMN "PIECE_SELL"."PIECE_NO" IS '작품번호';

COMMENT ON COLUMN "PIECE_SELL"."SELL_PRICE" IS '판매가격';

ALTER TABLE "MEMBER" ADD CONSTRAINT "PK_MEMBER" PRIMARY KEY (
	"MEMBER_NO"
);

ALTER TABLE "ARTIST" ADD CONSTRAINT "PK_ARTIST" PRIMARY KEY (
	"MEMBER_NO"
);

ALTER TABLE "PIECE" ADD CONSTRAINT "PK_PIECE" PRIMARY KEY (
	"PIECE_NO"
);

ALTER TABLE "AUCTION" ADD CONSTRAINT "PK_AUCTION" PRIMARY KEY (
	"AUCTION"
);

ALTER TABLE "NOTIFICATION" ADD CONSTRAINT "PK_NOTIFICATION" PRIMARY KEY (
	"NOTI_NO"
);

ALTER TABLE "DELIVERY" ADD CONSTRAINT "PK_DELIVERY" PRIMARY KEY (
	"DELIVERY_NO"
);

ALTER TABLE "FOLLOW" ADD CONSTRAINT "PK_FOLLOW" PRIMARY KEY (
	"MEMBER_NO",
	"MEMBER_NO2"
);

ALTER TABLE "WISH" ADD CONSTRAINT "PK_WISH" PRIMARY KEY (
	"MEMBER_NO",
	"PIECE_NO"
);

ALTER TABLE "PAYMENT_RECORD" ADD CONSTRAINT "PK_PAYMENT_RECORD" PRIMARY KEY (
	"RECORD_NO"
);

ALTER TABLE "REPORT" ADD CONSTRAINT "PK_REPORT" PRIMARY KEY (
	"REPORT_NO"
);

ALTER TABLE "QUESTION" ADD CONSTRAINT "PK_QUESTION" PRIMARY KEY (
	"QUESTION_NO"
);

ALTER TABLE "PIECE_AUCTION" ADD CONSTRAINT "PK_PIECE_AUCTION" PRIMARY KEY (
	"PIECE_NO"
);

ALTER TABLE "NOTICE" ADD CONSTRAINT "PK_NOTICE" PRIMARY KEY (
	"NOTICE_NO"
);

ALTER TABLE "PIECE_CATEGORY" ADD CONSTRAINT "PK_PIECE_CATEGORY" PRIMARY KEY (
	"PIECE_CATEGORY_NO"
);

ALTER TABLE "QUESTION_CATEGORY" ADD CONSTRAINT "PK_QUESTION_CATEGORY" PRIMARY KEY (
	"QUESTION_CATEGORY_NO"
);

ALTER TABLE "PIECE_SELL" ADD CONSTRAINT "PK_PIECE_SELL" PRIMARY KEY (
	"PIECE_NO"
);

ALTER TABLE "ARTIST" ADD CONSTRAINT "FK_MEMBER_TO_ARTIST_1" FOREIGN KEY (
	"MEMBER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);

ALTER TABLE "PIECE" ADD CONSTRAINT "FK_ARTIST_TO_PIECE_1" FOREIGN KEY (
	"MEMBER_NO"
)
REFERENCES "ARTIST" (
	"MEMBER_NO"
);

ALTER TABLE "PIECE" ADD CONSTRAINT "FK_PIECE_CATEGORY_TO_PIECE_1" FOREIGN KEY (
	"PIECE_CATEGORY_NO"
)
REFERENCES "PIECE_CATEGORY" (
	"PIECE_CATEGORY_NO"
);

ALTER TABLE "AUCTION" ADD CONSTRAINT "FK_PIECE_TO_AUCTION_1" FOREIGN KEY (
	"PIECE_NO"
)
REFERENCES "PIECE" (
	"PIECE_NO"
);

ALTER TABLE "AUCTION" ADD CONSTRAINT "FK_MEMBER_TO_AUCTION_1" FOREIGN KEY (
	"MEMBER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);

ALTER TABLE "NOTIFICATION" ADD CONSTRAINT "FK_MEMBER_TO_NOTIFICATION_1" FOREIGN KEY (
	"MEMBER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);

ALTER TABLE "DELIVERY" ADD CONSTRAINT "FK_PIECE_TO_DELIVERY_1" FOREIGN KEY (
	"PIECE_NO"
)
REFERENCES "PIECE" (
	"PIECE_NO"
);

ALTER TABLE "DELIVERY" ADD CONSTRAINT "FK_MEMBER_TO_DELIVERY_1" FOREIGN KEY (
	"MEMBER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);

ALTER TABLE "FOLLOW" ADD CONSTRAINT "FK_MEMBER_TO_FOLLOW_1" FOREIGN KEY (
	"MEMBER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);

ALTER TABLE "FOLLOW" ADD CONSTRAINT "FK_ARTIST_TO_FOLLOW_1" FOREIGN KEY (
	"MEMBER_NO2"
)
REFERENCES "ARTIST" (
	"MEMBER_NO"
);

ALTER TABLE "WISH" ADD CONSTRAINT "FK_MEMBER_TO_WISH_1" FOREIGN KEY (
	"MEMBER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);

ALTER TABLE "WISH" ADD CONSTRAINT "FK_PIECE_TO_WISH_1" FOREIGN KEY (
	"PIECE_NO"
)
REFERENCES "PIECE" (
	"PIECE_NO"
);

ALTER TABLE "PAYMENT_RECORD" ADD CONSTRAINT "FK_MEMBER_TO_PAYMENT_RECORD_1" FOREIGN KEY (
	"MEMBER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);

ALTER TABLE "PAYMENT_RECORD" ADD CONSTRAINT "FK_PIECE_TO_PAYMENT_RECORD_1" FOREIGN KEY (
	"PIECE_NO"
)
REFERENCES "PIECE" (
	"PIECE_NO"
);

ALTER TABLE "REPORT" ADD CONSTRAINT "FK_MEMBER_TO_REPORT_1" FOREIGN KEY (
	"MEMBER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);

ALTER TABLE "REPORT" ADD CONSTRAINT "FK_PIECE_TO_REPORT_1" FOREIGN KEY (
	"PIECE_NO"
)
REFERENCES "PIECE" (
	"PIECE_NO"
);

ALTER TABLE "QUESTION" ADD CONSTRAINT "FK_MEMBER_TO_QUESTION_1" FOREIGN KEY (
	"MEMBER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);

ALTER TABLE "QUESTION" ADD CONSTRAINT "FK_QUESTION_CATEGORY_TO_QUESTION_1" FOREIGN KEY (
	"QUESTION_CATEGORY_NO"
)
REFERENCES "QUESTION_CATEGORY" (
	"QUESTION_CATEGORY_NO"
);

ALTER TABLE "PIECE_AUCTION" ADD CONSTRAINT "FK_PIECE_TO_PIECE_AUCTION_1" FOREIGN KEY (
	"PIECE_NO"
)
REFERENCES "PIECE" (
	"PIECE_NO"
);

ALTER TABLE "PIECE_SELL" ADD CONSTRAINT "FK_PIECE_TO_PIECE_SELL_1" FOREIGN KEY (
	"PIECE_NO"
)
REFERENCES "PIECE" (
	"PIECE_NO"
);


------------------------------------------------------------------------------
------------------------------------------------------------------------------
 
CREATE TABLE "WORK" (
	"WORK_NO"	NUMBER		NOT NULL,
	"MEMBER_NO"	NUMBER		NOT NULL,
	"WORK_DETAIL" NVARCHAR2(100) NOT NULL);

COMMENT ON COLUMN "WORK"."WORK_NO" IS '경력사항 번호';

COMMENT ON COLUMN "WORK"."MEMBER_NO" IS '작가 회원번호';

COMMENT ON COLUMN "WORK"."WORK_DETAIL" IS '경력사항 내용';

ALTER TABLE "WORK" ADD CONSTRAINT "PK_WORK" PRIMARY KEY (
	"WORK_NO"
);

ALTER TABLE "WORK" ADD CONSTRAINT "FK_ARTIST_TO_WORK_1" FOREIGN KEY (
	"MEMBER_NO"
)
REFERENCES "ARTIST" (
	"MEMBER_NO"
);


------------------------------------------------------------------------------
------------------------------------------------------------------------------
DROP TABLE "PAYMENT_RECORD";

CREATE TABLE "PAYMENT_RECORD" (
	"RECORD_NO"	NUMBER		NOT NULL,
	"MEMBER_NO"	NUMBER		NOT NULL,
	"PIECE_NO"	NUMBER		NOT NULL,
	"MERCHANT_UID"	NVARCHAR2(200)		NOT NULL,
	"PAY_AMOUNT"	NUMBER		NOT NULL,
	"PAY_DATE"	DATE	DEFAULT CURRENT_DATE	NOT NULL,
	"PAY_NAME"	NVARCHAR2(6)		NOT NULL,
	"PAY_PHONE"	NVARCHAR2(11)		NOT NULL
);

COMMENT ON COLUMN "PAYMENT_RECORD"."RECORD_NO" IS '결제번호';

COMMENT ON COLUMN "PAYMENT_RECORD"."MEMBER_NO" IS '회원번호';

COMMENT ON COLUMN "PAYMENT_RECORD"."PIECE_NO" IS '결제한 작품번호';

COMMENT ON COLUMN "PAYMENT_RECORD"."MERCHANT_UID" IS '결제앱번호';

COMMENT ON COLUMN "PAYMENT_RECORD"."PAY_AMOUNT" IS '결제금액';

COMMENT ON COLUMN "PAYMENT_RECORD"."PAY_DATE" IS '결제일자';

COMMENT ON COLUMN "PAYMENT_RECORD"."PAY_NAME" IS '입금자';

COMMENT ON COLUMN "PAYMENT_RECORD"."PAY_PHONE" IS '전화번호';

ALTER TABLE "PAYMENT_RECORD" ADD CONSTRAINT "PK_PAYMENT_RECORD" PRIMARY KEY (
	"RECORD_NO"
);

ALTER TABLE "PAYMENT_RECORD" ADD CONSTRAINT "FK_MEMBER_TO_PAYMENT_RECORD_1" FOREIGN KEY (
	"MEMBER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);

ALTER TABLE "PAYMENT_RECORD" ADD CONSTRAINT "FK_PIECE_TO_PAYMENT_RECORD_1" FOREIGN KEY (
	"PIECE_NO"
)
REFERENCES "PIECE" (
	"PIECE_NO"
);



------------------------------------------------------------------------------
------------------------------------------------------------------------------
CREATE TABLE BANK_CODE_LIST (
    BANK_NO VARCHAR2(3) PRIMARY KEY,
    BANK_NAME VARCHAR2(50) NOT NULL
);
SELECT* FROM BANK_CODE_LIST;
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('001', '한국은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('002', '산업은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('003', '기업은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('004', '국민은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('005', '외환은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('007', '수협중앙회');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('008', '수출입은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('011', '농협은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('012', '지역농.축협');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('020', '우리은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('023', 'SC은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('027', '한국씨티은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('031', '대구은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('032', '부산은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('034', '광주은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('035', '제주은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('037', '전북은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('039', '경남은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('045', '새마을금고중앙회');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('048', '신협중앙회');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('050', '상호저축은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('051', '중국은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('052', '모건스탠리은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('054', 'HSBC은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('055', '도이치은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('056', '알비에스피엘씨은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('057', '제이피모간체이스은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('058', '미즈호은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('059', '미쓰비시도쿄UFJ은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('060', 'BOA은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('061', '비엔피파리바은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('062', '중국공상은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('063', '중국은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('064', '산림조합중앙회');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('065', '대화은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('066', '교통은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('071', '우체국');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('076', '신용보증기금');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('077', '기술보증기금');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('081', 'KEB하나은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('088', '신한은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('089', '케이뱅크');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('090', '카카오뱅크');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('093', '한국주택금융공사');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('094', '서울보증보험');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('095', '경찰청');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('096', '한국전자금융(주)');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('099', '금융결제원');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('102', '대신저축은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('103', '에스비아이저축은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('104', '에이치케이저축은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('105', '웰컴저축은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('106', '신한저축은행');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('209', '유안타증권');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('218', '현대증권');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('221', '골든브릿지투자증권');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('222', '한양증권');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('223', '리딩투자증권');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('224', 'BNK투자증권');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('225', 'IBK투자증권');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('226', 'KB투자증권');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('227', 'KTB투자증권');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('230', '미래에셋증권');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('238', '대우증권');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('240', '삼성증권');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('243', '한국투자증권');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('261', '교보증권');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('262', '하이투자증권');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('263', 'HMC투자증권');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('264', '키움증권');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('265', '이베스트투자증권');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('266', 'SK증권');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('267', '대신증권');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('269', '한화투자증권');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('270', '하나대투증권');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('278', '신한금융투자');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('279', 'DB금융투자');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('280', '유진투자증권');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('287', '메리츠종합금융증권');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('289', 'NH투자증권');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('290', '부국증권');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('291', '신영증권');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('292', '엘아이지투자증권');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('293', '한국증권금융');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('294', '펀드온라인코리아');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('295', '우리종합금융');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('296', '삼성선물');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('297', '외환선물');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('298', '현대선물');
INSERT INTO BANK_CODE_LIST (BANK_NO, BANK_NAME) VALUES ('092', '토스뱅크');
COMMIT;
------------------------------------------------------------------------------
------------------------------------------------------------------------------

-- 시퀀스 생성
CREATE SEQUENCE SEQ_MEMBER_NO NOCACHE;
CREATE SEQUENCE SEQ_PIECE_NO NOCACHE;
CREATE SEQUENCE SEQ_AUCTION_NO NOCACHE;
CREATE SEQUENCE SEQ_CATEGORY_NO NOCACHE;
CREATE SEQUENCE SEQ_NOTI_NO NOCACHE;
CREATE SEQUENCE SEQ_DELIVERY_NO NOCACHE;
CREATE SEQUENCE SEQ_REPORT_NO NOCACHE;
CREATE SEQUENCE SEQ_QUESTION_NO NOCACHE;
CREATE SEQUENCE SEQ_QUESTION_CATEGORY_NO NOCACHE;
CREATE SEQUENCE SEQ_NOTICE_NO NOCACHE;
CREATE SEQUENCE SEQ_WORK_NO NOCACHE;
CREATE SEQUENCE SEQ_RECORD_NO NOCACHE;

DROP SEQUENCE SEQ_MEMBER_NO;
DROP SEQUENCE SEQ_PIECE_NO;
DROP SEQUENCE SEQ_AUCTION_NO;
DROP SEQUENCE SEQ_CATEGORY_NO;
DROP SEQUENCE SEQ_NOTI_NO;
DROP SEQUENCE SEQ_DELIVERY_NO;
DROP SEQUENCE SEQ_REPORT_NO;
DROP SEQUENCE SEQ_QUESTION_NO;
DROP SEQUENCE SEQ_QUESTION_CATEGORY_NO;
DROP SEQUENCE SEQ_NOTICE_NO;
DROP SEQUENCE SEQ_WORK_NO;
DROP SEQUENCE SEQ_RECORD_NO;




------------------------------------------------------------------------------
------------------------------------------------------------------------------

COMMIT;

-- 맴버 샘플 확인
SELECT * FROM "MEMBER" ORDER BY MEMBER_NO;
COMMIT;
INSERT INTO "MEMBER"
VALUES(
	SEQ_MEMBER_NO.NEXTVAL,
	(SELECT RANDOM_NAME() FROM DUAL),
	'delete04',
	'$2a$10$S3eOXx0HH1.3zUw5cUcZluGJ4PnQ.0QYgSEacOoLCdYBMUbPyrirS',
	'hyunj1017@naver.com',
	'01021133766',
	'N',
	1
);


-- 작가 샘플 확인
SELECT * FROM "ARTIST" ORDER BY MEMBER_NO;
INSERT INTO ARTIST
VALUES(
	17,
	'profile/IMG',
	'꿈결속으로',
	'portfolio/POR',
	'001',
	'1234567890'
);
UPDATE "ARTIST" SET BANK_NO = '0123456789';
UPDATE "ARTIST" SET ARTIST_REG = 'Y' WHERE MEMBER_NO = 2;
ALTER TABLE KH_PLKLJ.ARTIST MODIFY BANK_NO VARCHAR2(20);

  '004'
WHERE MEMBER_NO = 2;
rollback;
SELECT
	M.MEMBER_NO,
	MEMBER_ID,
	MEMBER_PW,
	MEMBER_NAME,
	MEMBER_EMAIL,
	MEMBER_PHONE,
	ARTIST_REG,
	MEMBER_PENALTY,
	ARTIST_NICKNAME,
	ARTIST_PROFILE
FROM "MEMBER" M
LEFT JOIN "ARTIST" A ON (M.MEMBER_NO = A.MEMBER_NO)
WHERE 
	MEMBER_DEL_FL = 'N';
SELECT
	BANK_CODE,
	(SELECT BANK_NAME FROM BANK_CODE_LIST BL WHERE A.BANK_CODE = BL.BANK_CODE) AS "BANK_NAME"
FROM ARTIST A;


--카테고리
SELECT * FROM PIECE_CATEGORY;
INSERT INTO PIECE_CATEGORY
VALUES(SEQ_CATEGORY_NO.nextval, '단색화');
COMMIT;

-- 작품샘플
SELECT * FROM PIECE ORDER BY PIECE_NO;
INSERT INTO PIECE
VALUES(
	SEQ_PIECE_NO.NEXTVAL,
	10,
	'/images/piece/imagename',
	'무제',
	'설명없음',
	14,
	8,
	DEFAULT,
	2,
	'N',
	2
);
SELECT * FROM PIECE_AUCTION; -- 40,46
INSERT INTO PIECE_AUCTION
VALUES(
	21,
	TO_DATE('20241121','YYYYMMDD'),
	TO_DATE('20241122','YYYYMMDD'),
	11000000,
	46000000
);
UPDATE PIECE_AUCTION
SET START_DATE = TO_DATE('20241120','YYYYMMDD'),
	END_DATE = TO_DATE('20241121','YYYYMMDD')
WHERE PIECE_NO = 79;
UPDATE PIECE
SET PIECE_STATUS = 'D'
WHERE PIECE_NO = 79;
ROLLBACK;
UPDATE PIECE
SET PIECE_RENAME =
'/images/piece/' || PIECE_RENAME
WHERE PIECE_NO =    35;
ROLLBACK;
DELETE FROM PIECE WHERE PIECE_NO = 32;
SELECT * FROM PIECE ORDER BY PIECE_NO;
SELECT * FROM PIECE_SELL ORDER BY PIECE_NO;
SELECT * FROM PIECE_AUCTION ORDER BY PIECE_NO;
UPDATE PIECE
SET PIECE_RENAME = REPLACE(PIECE_RENAME, '/images/thumbnail/', '/images/piece/')
WHERE PIECE_NO < 18;
UPDATE PIECE_AUCTION
SET START_DATE = TO_DATE('20241114', 'YYYYMMDD'),
	END_DATE = TO_DATE('20241115', 'YYYYMMDD'),
	FINAL_PRICE = 120000000
WHERE PIECE_NO = 46;
UPDATE PIECE
SET PIECE_STATUS = 'F'
WHERE PIECE_NO = 46;

-- 문의
SELECT * FROM QUESTION;
SELECT * FROM QUESTION_CATEGORY ORDER BY QUESTION_CATEGORY_NO ASC;
INSERT INTO QUESTION_CATEGORY VALUES(SEQ_QUESTION_CATEGORY_NO.NEXTVAL, '');
UPDATE "QUESTION_CATEGORY" SET QUESTION_CATEGORY_NAME = '배송문의' WHERE QUESTION_CATEGORY_NO = 2;
COMMIT;
SELECT
	QUESTION_NO,
	QUESTION_CONTENT,
	(TO_CHAR(QUESTION_DATE, 'YY-MM-DD')) AS QUESTION_DATE,
	QUESTION_ANS_FL,
	QUESTION_ANSWER,
	QUESTION_CATEGORY_NO,
	(SELECT QUESTION_CATEGORY_NAME FROM QUESTION_CATEGORY QC WHERE QC.QUESTION_CATEGORY_NO = Q.QUESTION_CATEGORY_NO) AS QUESTION_CATEGORY_NAME
FROM "QUESTION" Q
WHERE
	MEMBER_NO = 1
AND QUESTION_DEL_FL = 'N'
ORDER BY QUESTION_NO DESC;

-- 팔로우
INSERT INTO "FOLLOW"
VALUES(1,17
);
SELECT
	ART.MEMBER_NO,
	ART.ARTIST_PROFILE,
	ART.ARTIST_NICKNAME
FROM "ARTIST" ART;
SELECT
	ART.MEMBER_NO,
	ART.ARTIST_PROFILE,
	ART.ARTIST_NICKNAME
FROM
	FOLLOW F
LEFT JOIN "ARTIST" ART ON (F.ARTIST_NO = ART.MEMBER_NO)
WHERE
	F.MEMBER_NO = 1;

-- 위시
SELECT * FROM WISH ORDER BY PIECE_NO;
SELECT * FROM PIECE ORDER BY PIECE_NO;
INSERT INTO WISH VALUES(1,46);
SELECT
	W.PIECE_NO,
	P.MEMBER_NO,
	(SELECT ARTIST_NICKNAME
	 FROM ARTIST A
	 WHERE A.MEMBER_NO = P.MEMBER_NO) AS "ARTIST_NICKNAME",
	P.PIECE_RENAME,
	P.PIECE_TITLE,
	P.PIECE_STATUS,
	PA.START_DATE
FROM
	WISH W
LEFT JOIN PIECE P ON (W.PIECE_NO = P.PIECE_NO)
LEFT JOIN PIECE_AUCTION PA ON (PA.PIECE_NO = W.PIECE_NO)
WHERE
	W.MEMBER_NO = 1
AND	P.PIECE_TYPE = 2
AND P.PIECE_STATUS IN ('A', 'S')
ORDER BY PIECE_NO;

-- 경매
SELECT * FROM PIECE_AUCTION;
SELECT
	TO_CHAR(START_DATE, 'YYYYMMDD') AS "DATE",
	COUNT(*)
FROM PIECE_AUCTION
GROUP BY TO_CHAR(START_DATE, 'YYYYMMDD');

SELECT
	P.PIECE_NO,
	P.MEMBER_NO,
	PIECE_RENAME,
	PIECE_TITLE,
	PIECE_STATUS,
	(TO_CHAR(START_DATE, 'MM/DD') || '(' || SUBSTR(TO_CHAR(START_DATE, 'DY'), 1, 1) || ')') AS START_DATE,
	(TO_CHAR(END_DATE, 'MM/DD') || '(' || SUBSTR(TO_CHAR(END_DATE, 'DY'), 1, 1) || ')') AS END_DATE,
	PA.FINAL_PRICE,
	D.DELIVERY_STATUS
FROM "PIECE" P
LEFT JOIN PIECE_AUCTION PA ON (P.PIECE_NO = PA.PIECE_NO)
LEFT JOIN DELIVERY D ON (D.PIECE_NO = P.PIECE_NO) 
WHERE
	P.PIECE_TYPE = 2
AND P.MEMBER_NO = 2
AND PIECE_STATUS NOT IN ('S')
AND (D.DELIVERY_STATUS < 3 OR D.DELIVERY_STATUS IS NULL);


SELECT
	P.PIECE_NO,
	PIECE_RENAME,
	PIECE_TITLE,
	SIZE_X,
	SIZE_Y,
	(SELECT ARTIST_NICKNAME FROM ARTIST AR WHERE AR.MEMBER_NO = P.MEMBER_NO) AS ARTIST_NICKNAME,
	PIECE_STATUS,
	TO_CHAR(A.END_PRICE, 'FM999,999,999,999,999') AS FINAL_PRICE
FROM PIECE P
LEFT JOIN (
		SELECT AC.PIECE_NO, AC.END_PRICE, AC.MEMBER_NO
		FROM AUCTION AC
		JOIN (
		    SELECT PIECE_NO, MAX(END_PRICE) AS MAX_PRICE
		    FROM AUCTION
		    GROUP BY PIECE_NO
			) B ON AC.PIECE_NO = B.PIECE_NO AND AC.END_PRICE = B.MAX_PRICE
	) A ON (P.PIECE_NO = A.PIECE_NO)
WHERE
	PIECE_TYPE = 2
AND P.PIECE_STATUS = 'D'
AND A.MEMBER_NO = 1;
SELECT MEMBER_NO FROM "MEMBER";
SELECT * FROM AUCTION;
SELECT PIECE_NO, START_PRICE, HOPE_PRICE FROM PIECE_AUCTION WHERE PIECE_NO IN (19, 20, 21);
INSERT INTO "AUCTION"
VALUES(SEQ_AUCTION_NO.NEXTVAL, 21, 7, CURRENT_DATE + 3, 20000000);

UPDATE "PIECE_AUCTION"
SET
	START_DATE = TO_DATE(TO_CHAR(CURRENT_DATE -1, 'YYYYMMDD'), 'YYYYMMDD'),
	END_DATE = TO_DATE(TO_CHAR(CURRENT_DATE, 'YYYYMMDD'), 'YYYYMMDD')
WHERE PIECE_NO = 21;


SELECT *
FROM ARTIST;
WHERE ARTIST_REG = 'N';

SELECT
	PIECE_NO,
	PIECE_RENAME,
	PIECE_TITLE,
	PIECE_DETAIL,
	SIZE_X,
	SIZE_Y,
	PIECE_CATEGORY_NO
FROM PIECE
WHERE
	PIECE_STATUS = 'T'
AND PIECE_NO = 1;

-----------------------------------------------------------------------
-- 진짜 경매 SQL (시작 A -> S)(낙찰품 S -> D)(유찰 S -> N)
SELECT PIECE_NO, PIECE_TYPE, PIECE_STATUS FROM PIECE ORDER BY PIECE_NO DESC;
SELECT PIECE_NO, START_DATE, END_DATE, START_PRICE FROM PIECE_AUCTION;
SELECT
	PIECE_NO,
	PIECE_TYPE,
	PIECE_STATUS,
	START_DATE,
	END_DATE,
	START_PRICE
FROM PIECE P
LEFT JOIN PIECE_AUCTION PA USING (PIECE_NO)
WHERE
	PIECE_TYPE = 2
AND PIECE_STATUS = 'A'
AND START_DATE = TO_DATE(TO_CHAR(CURRENT_DATE, 'YYYYMMDD'), 'YYYYMMDD');

SELECT
	PIECE_NO,
	PIECE_TYPE,
	PIECE_STATUS,
	START_DATE,
	END_DATE,
	START_PRICE
FROM PIECE P
LEFT JOIN PIECE_AUCTION PA USING (PIECE_NO)
WHERE
	PIECE_TYPE = 2
AND START_DATE = TO_DATE('20241117', 'YYYYMMDD');

-- (시작 A -> S) (18 -> S)
UPDATE PIECE
SET PIECE_STATUS = 'S'
WHERE PIECE_NO IN (
	SELECT PIECE_NO
	FROM PIECE_AUCTION
	WHERE START_DATE = TO_DATE(TO_CHAR(CURRENT_DATE, 'YYYYMMDD'), 'YYYYMMDD')
	);
ROLLBACK;
-- (낙찰품 S -> D)(유찰 S -> N) (19, 20 -> D / 21 -> N)

-- 낙찰된 작품 리스트 조회
SELECT
	P.PIECE_NO,
	PIECE_STATUS
FROM PIECE P
LEFT JOIN PIECE_AUCTION PA ON (P.PIECE_NO = PA.PIECE_NO)
WHERE
	END_DATE = TO_DATE(TO_CHAR(CURRENT_DATE, 'YYYYMMDD'), 'YYYYMMDD')
AND P.PIECE_NO IN (
	SELECT PIECE_NO
	FROM AUCTION A
	WHERE A.PIECE_NO = P.PIECE_NO 
	);
-- 유찰된 작품 리스트 조회
SELECT
	P.PIECE_NO,
	PIECE_STATUS
FROM PIECE P
LEFT JOIN PIECE_AUCTION PA ON (P.PIECE_NO = PA.PIECE_NO)
WHERE
	END_DATE = TO_DATE(TO_CHAR(CURRENT_DATE, 'YYYYMMDD'), 'YYYYMMDD')
AND P.PIECE_NO NOT IN (
	SELECT PIECE_NO
	FROM AUCTION A
	WHERE A.PIECE_NO = P.PIECE_NO 
	);
-- 경매품 처리
UPDATE PIECE P
SET PIECE_STATUS = 'D'
WHERE PIECE_NO = 19;
UPDATE PIECE P
SET PIECE_STATUS = 'N'
WHERE PIECE_NO = 21;
-- 유찰품 즉시판매로 등록
INSERT INTO PIECE_SELL
VALUES(21, (SELECT HOPE_PRICE FROM PIECE_AUCTION WHERE PIECE_NO = 21));

SELECT * FROM PIECE_SELL WHERE PIECE_NO = 21;
SELECT HOPE_PRICE FROM PIECE_AUCTION WHERE PIECE_NO = 21


DELETE FROM "PIECE_SELL" WHERE PIECE_NO = 21;
UPDATE PIECE SET PIECE_STATUS = 'S' WHERE PIECE_NO IN (19,20,21);
UPDATE PIECE SET PIECE_STATUS = 'A' WHERE PIECE_NO IN (18);

COMMIT;


------------------------------------------------------
SELECT
	P.PIECE_NO,
	P.MEMBER_NO,
	PIECE_RENAME,
	PIECE_TITLE,
	PIECE_STATUS,
	(TO_CHAR(PA.START_DATE    , 'MM/DD(DY)')) AS START_DATE,
	(TO_CHAR(PA.START_DATE - 8, 'MM/DD(DY)')) AS OPEN_DATE,
	(TO_CHAR(PA.START_DATE - 7, 'MM/DD(DY)')) AS PREVIEW_START_DATE,
	(TO_CHAR(PA.START_DATE - 1, 'MM/DD(DY)')) AS PREVIEW_END_DATE,
	(TO_CHAR(END_DATE, 'MM/DD(DY)')) AS END_DATE,
	TO_CHAR(PA.START_PRICE, 'FM999,999,999,999,999') AS START_PRICE,
	D.DELIVERY_STATUS
FROM "PIECE" P
LEFT JOIN PIECE_AUCTION PA ON (P.PIECE_NO = PA.PIECE_NO)
LEFT JOIN DELIVERY D ON (D.PIECE_NO = P.PIECE_NO)
LEFT JOIN (
       SELECT MAX(END_PRICE) FINAL_PRICE, PIECE_NO
       FROM AUCTION
       GROUP BY PIECE_NO      
      ) A ON (A.PIECE_NO = P.PIECE_NO)
WHERE
	P.PIECE_TYPE != 1
AND P.MEMBER_NO = 2
AND PIECE_STATUS NOT IN ('F')
AND (D.DELIVERY_STATUS < 3 OR D.DELIVERY_STATUS IS NULL)
ORDER BY PA.START_DATE ASC;

------------------------------------------------------
SELECT
	R.REPORT_NO AS "reportNo",
	R.MEMBER_NO "memberNo",
	R.PIECE_NO "pieceNo",
	P.PIECE_TITLE AS "pieceName",
	P.SIZE_X || ' x ' || P.SIZE_Y AS "pieceSize",
	TO_CHAR(END_PRICE, 'FM999,999,999,999,999') AS "auctionPrice",
	D.ARTIST_NICKNAME AS "artistNickname"
FROM
	REPORT R
JOIN
	PIECE P ON R.PIECE_NO = P.PIECE_NO
LEFT JOIN ARTIST D ON R.MEMBER_NO = D.MEMBER_NO
LEFT JOIN (
	SELECT MAX(END_PRICE) END_PRICE, PIECE_NO
	FROM AUCTION
	GROUP BY PIECE_NO      
	) A ON (A.PIECE_NO = R.PIECE_NO)
WHERE
  	R.REPORT_DEL_FL ='N';


SELECT * FROM AUCTION;


SELECT
	BANK_CODE,
	BANK_NAME,
	BANK_NO
FROM
	ARTIST A
LEFT JOIN BANK_CODE_LIST USING (BANK_CODE)
WHERE A.MEMBER_NO =2;
COMMIT;
SELECT * FROM PIECE WHERE PIECE_NO IN (2,3);
SELECT MEMBER_NO FROM "MEMBER" ORDER BY MEMBER_NO ASC;
------------------------------------------------------------
-- 판매완료샘플생성 PIECE_STATUS 'N' -> 'F' / 'D' -> 'F'
SELECT PIECE_NO, MEMBER_NO, PIECE_STATUS, SELL_PRICE
FROM PIECE
LEFT JOIN PIECE_SELL USING(PIECE_NO)
WHERE PIECE_TYPE =1
AND PIECE_STATUS = 'F'
ORDER BY PIECE_NO ASC;

SELECT P.PIECE_NO, P.MEMBER_NO AS "작가번호", PIECE_STATUS, END_DATE, END_PRICE, 
	(SELECT A.MEMBER_NO FROM AUCTION A
	WHERE A.PIECE_NO = AC.PIECE_NO
	AND A.END_PRICE = AC.END_PRICE) AS "구매자"
FROM PIECE P
LEFT JOIN PIECE_AUCTION PA ON(PA.PIECE_NO = P.PIECE_NO)
LEFT JOIN (SELECT MAX(END_PRICE) END_PRICE, PIECE_NO
	FROM AUCTION
	GROUP BY PIECE_NO) AC ON(AC.PIECE_NO = P.PIECE_NO)
WHERE PIECE_TYPE =2
AND PIECE_STATUS = 'F'
ORDER BY P.PIECE_NO ASC;

UPDATE PIECE SET PIECE_STATUS = 'M' WHERE PIECE_TYPE = 1 AND PIECE_STATUS = 'F';


------------------------------------------------------------
-- 작가 월별 판매작품목록 작품이름,낙찰가,입금상태, 작품타입




-- 월별 판매금액 조회






------------------------------------------------------------
SELECT ARTIST_PORTFOLIO AS "FILENAME"
FROM ARTIST
UNION
SELECT
	ARTIST_PROFILE AS "FILENAME"
FROM ARTIST
UNION
SELECT
	PIECE_RENAME AS "FILENAME"
FROM PIECE;
COMMIT;
UPDATE "ARTIST" SET ARTIST_PROFILE = 'https://firebasestorage.googleapis.com/v0/b/odagirijoe-3e3a4.firebasestorage.app/o/profile10.jpg?alt=media' WHERE MEMBER_NO = 10;
UPDATE "ARTIST" SET ARTIST_PROFILE = 'https://firebasestorage.googleapis.com/v0/b/odagirijoe-3e3a4.firebasestorage.app/o/profile11.jpg?alt=media' WHERE MEMBER_NO = 11;
UPDATE "ARTIST" SET ARTIST_PROFILE = 'https://firebasestorage.googleapis.com/v0/b/odagirijoe-3e3a4.firebasestorage.app/o/profile12.jpg?alt=media' WHERE MEMBER_NO = 12;
UPDATE "ARTIST" SET ARTIST_PROFILE = 'https://firebasestorage.googleapis.com/v0/b/odagirijoe-3e3a4.firebasestorage.app/o/profile13.jpg?alt=media' WHERE MEMBER_NO = 13;
UPDATE "ARTIST" SET ARTIST_PROFILE = 'https://firebasestorage.googleapis.com/v0/b/odagirijoe-3e3a4.firebasestorage.app/o/profile14.png?alt=media' WHERE MEMBER_NO = 14;
UPDATE "ARTIST" SET ARTIST_PROFILE = 'https://firebasestorage.googleapis.com/v0/b/odagirijoe-3e3a4.firebasestorage.app/o/profile15.jpg?alt=media' WHERE MEMBER_NO = 15;
UPDATE "ARTIST" SET ARTIST_PROFILE = 'https://firebasestorage.googleapis.com/v0/b/odagirijoe-3e3a4.firebasestorage.app/o/profile16.jpg?alt=media' WHERE MEMBER_NO = 16;
UPDATE "ARTIST" SET ARTIST_PROFILE = 'https://firebasestorage.googleapis.com/v0/b/odagirijoe-3e3a4.firebasestorage.app/o/profile17.jpg?alt=media' WHERE MEMBER_NO = 17;
UPDATE "ARTIST" SET ARTIST_PROFILE = 'https://firebasestorage.googleapis.com/v0/b/odagirijoe-3e3a4.firebasestorage.app/o/profile18.jpg?alt=media' WHERE MEMBER_NO = 18;
UPDATE "ARTIST" SET ARTIST_PROFILE = 'https://firebasestorage.googleapis.com/v0/b/odagirijoe-3e3a4.firebasestorage.app/o/profile7.png?alt=media' WHERE MEMBER_NO = 7;
UPDATE "ARTIST" SET ARTIST_PROFILE = 'https://firebasestorage.googleapis.com/v0/b/odagirijoe-3e3a4.firebasestorage.app/o/profile8.jpg?alt=media' WHERE MEMBER_NO = 8;
UPDATE "ARTIST" SET ARTIST_PROFILE = 'https://firebasestorage.googleapis.com/v0/b/odagirijoe-3e3a4.firebasestorage.app/o/profile9.jpg?alt=media' WHERE MEMBER_NO = 9;


SELECT * FROM PIECE JOIN PIECE_AUCTION USING(PIECE_NO);

SELECT PIECE_NO, PIECE_TITLE,
PIECE_TYPE, START_PRICE, HOPE_PRICE, END_PRICE, PIECE_STATUS,
START_DATE, END_DATE
FROM PIECE
JOIN ARTIST USING(MEMBER_NO)
LEFT JOIN PIECE_AUCTION USING(PIECE_NO)
LEFT JOIN PIECE_CATEGORY USING(PIECE_CATEGORY_NO)
LEFT JOIN (
	SELECT MAX(END_PRICE) END_PRICE, PIECE_NO
	FROM AUCTION
	GROUP BY PIECE_NO	
	) USING(PIECE_NO)
ORDER BY PIECE_NO DESC;

	
SELECT CONSTRAINT_NAME, TABLE_NAME
FROM USER_CONSTRAINTS
WHERE R_CONSTRAINT_NAME = (
    SELECT CONSTRAINT_NAME
    FROM USER_CONSTRAINTS
    WHERE TABLE_NAME = 'PIECE' AND CONSTRAINT_TYPE = 'P'
);


ALTER TABLE AUCTION DROP CONSTRAINT FK_PIECE_TO_AUCTION_1;
ALTER TABLE WISH DROP CONSTRAINT FK_PIECE_TO_WISH_1;
ALTER TABLE REPORT DROP CONSTRAINT FK_PIECE_TO_REPORT_1;
ALTER TABLE PIECE_AUCTION DROP CONSTRAINT FK_PIECE_TO_PIECE_AUCTION_1;
ALTER TABLE PIECE_SELL DROP CONSTRAINT FK_PIECE_TO_PIECE_SELL_1;
ALTER TABLE DELIVERY DROP CONSTRAINT FK_PIECE_TO_DELIVERY_1;
ALTER TABLE PAYMENT_RECORD DROP CONSTRAINT FK_PIECE_TO_PAYMENT_RECORD_1;

ALTER TABLE AUCTION
ADD CONSTRAINT FK_PIECE_TO_AUCTION_1
FOREIGN KEY (PIECE_NO)
REFERENCES PIECE (PIECE_NO)
ON DELETE CASCADE;

ALTER TABLE WISH
ADD CONSTRAINT FK_PIECE_TO_WISH_1
FOREIGN KEY (PIECE_NO)
REFERENCES PIECE (PIECE_NO)
ON DELETE CASCADE;

ALTER TABLE REPORT
ADD CONSTRAINT FK_PIECE_TO_REPORT_1
FOREIGN KEY (PIECE_NO)
REFERENCES PIECE (PIECE_NO)
ON DELETE CASCADE;

ALTER TABLE PIECE_AUCTION
ADD CONSTRAINT FK_PIECE_TO_PIECE_AUCTION_1
FOREIGN KEY (PIECE_NO)
REFERENCES PIECE (PIECE_NO)
ON DELETE CASCADE;

ALTER TABLE PIECE_SELL
ADD CONSTRAINT FK_PIECE_TO_PIECE_SELL_1
FOREIGN KEY (PIECE_NO)
REFERENCES PIECE (PIECE_NO)
ON DELETE CASCADE;

ALTER TABLE DELIVERY
ADD CONSTRAINT FK_PIECE_TO_DELIVERY_1
FOREIGN KEY (PIECE_NO)
REFERENCES PIECE (PIECE_NO)
ON DELETE CASCADE;

ALTER TABLE PAYMENT_RECORD
ADD CONSTRAINT FK_PIECE_TO_PAYMENT_RECORD_1
FOREIGN KEY (PIECE_NO)
REFERENCES PIECE (PIECE_NO)
ON DELETE CASCADE;


-- 79
UPDATE PIECE_AUCTION
SET START_DATE = TO_DATE('20241120','YYYYMMDD'),
	END_DATE = TO_DATE('20241121','YYYYMMDD')
WHERE PIECE_NO = 79;
UPDATE PIECE
SET PIECE_STATUS = 'D'
WHERE PIECE_NO = 79;
INSERT INTO "AUCTION"
VALUES(SEQ_AUCTION_NO.NEXTVAL, 79, 1, CURRENT_DATE -1, 35000000);
COMMIT;

SELECT * FROM AUCTION ORDER BY PIECE_NO ASC, END_PRICE ASC;
SELECT
	P.PIECE_NO,
	PIECE_RENAME,
	PIECE_TITLE,
	PIECE_STATUS,
	SIZE_X,
	SIZE_Y,
	(SELECT TO_CHAR(END_PRICE, 'FM999,999,999,999,999')
	FROM AUCTION A2
	WHERE A2.MEMBER_NO = 1
	AND  A2.PIECE_NO = P.PIECE_NO
	ORDER BY END_PRICE DESC
	FETCH FIRST 1 ROWS ONLY) AS END_PRICE
FROM PIECE P
LEFT JOIN PIECE_AUCTION PA ON (P.PIECE_NO = PA.PIECE_NO)
WHERE
	PIECE_TYPE = 2
AND P.PIECE_STATUS = 'S'
AND 1 IN
	(SELECT A.MEMBER_NO
	 FROM AUCTION A
	 WHERE A.PIECE_NO = P.PIECE_NO);

DELETE FROM DELIVERY WHERE PIECE_NO = 79;
COMMIT;
SELECT
	PIECE_NO,
	PIECE_TITLE,
	GREATEST(NVL(SELL_PRICE,0), NVL(END_PRICE,0)) AS SELL_PRICE
FROM PIECE
LEFT JOIN PIECE_SELL USING(PIECE_NO)
LEFT JOIN (
	SELECT MAX(END_PRICE) END_PRICE, PIECE_NO
	FROM AUCTION
	GROUP BY PIECE_NO	
	) USING(PIECE_NO)
WHERE 
	PIECE_NO = 79;
	

SELECT *
FROM PAYMENT_RECORD
WHERE MEMBER_NO = 1;

--pieceNo
--pieceRename
--pieceTitle
--pieceTitle
--finalPrice
--sizeX
--sizeY
SELECT 
	PR.PIECE_NO,
	P.PIECE_RENAME,
	P.PIECE_TITLE,
	TO_CHAR(PR.PAY_AMOUNT, 'FM999,999,999,999,999') AS "FINAL_PRICE",
	P.SIZE_X,
	P.SIZE_Y,
	A.ARTIST_NICKNAME
FROM PAYMENT_RECORD PR
LEFT JOIN PIECE P ON (PR.PIECE_NO = P.PIECE_NO)
LEFT JOIN ARTIST A ON (P.MEMBER_NO = A.MEMBER_NO)
WHERE PR.MEMBER_NO = 1;

--  <th>작가</th> 
--  <th>작품 이름</th>
--  <th>종류</th>
--  <th>가격</th>
--  <th>수수료</th>
--  <th>판매일자</th>
--  <th>입금완료상태</th>

SELECT *
FROM
(SELECT
	A.ARTIST_NICKNAME,
	PIECE_TITLE,
	PIECE_TYPE,
	TO_CHAR(END_PRICE, 'FM999,999,999,999,999') AS "PAY_AMOUNT",
	TO_CHAR(END_DATE, 'MM"월" DD"일"') AS "PAY_DATE",
	(SELECT COUNT(*)
	FROM PAYMENT_RECORD PR
	WHERE PR.PIECE_NO = P.PIECE_NO
	) AS "PRICE_REG"
FROM PIECE P
LEFT JOIN ARTIST A ON (P.MEMBER_NO = A.MEMBER_NO)
LEFT JOIN PIECE_AUCTION PA ON (PA.PIECE_NO = P.PIECE_NO)
LEFT JOIN (
	SELECT MAX(END_PRICE) END_PRICE, PIECE_NO
	FROM AUCTION
	GROUP BY PIECE_NO
	) AC ON (AC.PIECE_NO = P.PIECE_NO)
WHERE A.MEMBER_NO = 2
AND TO_CHAR(END_DATE, 'YYYY-MM') = '2024-11'
AND PIECE_TYPE = 2
AND PIECE_STATUS IN ('F', 'D')
UNION
SELECT
	A.ARTIST_NICKNAME,
	PIECE_TITLE,
	PIECE_TYPE,
	TO_CHAR(PR.PAY_AMOUNT, 'FM999,999,999,999,999') AS "PAY_AMOUNT",
	TO_CHAR(PR.PAY_DATE, 'MM"월" DD"일"') AS "PAY_DATE",
	1 AS "PRICE_REG"
FROM PIECE P
LEFT JOIN ARTIST A ON (P.MEMBER_NO = A.MEMBER_NO)
LEFT JOIN PAYMENT_RECORD PR ON (PR.PIECE_NO = P.PIECE_NO)
WHERE A.MEMBER_NO = 2
AND TO_CHAR(PR.PAY_DATE, 'YYYY-MM') = '2024-11'
AND PIECE_TYPE = 1
AND PIECE_STATUS = 'F'
)
ORDER BY "PAY_DATE" ASC, "PAY_AMOUNT" DESC;



SELECT *
FROM PAYMENT_RECORD PR
LEFT JOIN PIECE P USING(PIECE_NO)
WHERE P.MEMBER_NO = 2;
SELECT *
FROM PIECE P
LEFT JOIN PAYMENT_RECORD USING(PIECE_NO)
WHERE P.MEMBER_NO = 2
AND PIECE_STATUS IN ('D', 'F');

SELECT SEQ_WORK_NO.NEXTVAL FROM DUAL
COMMIT;

SELECT * FROM PIECE_AUCTION START_DATE;




SELECT A.MEMBER_NO, MEMBER_ID, (SELECT COUNT(*) FROM PIECE P WHERE P.MEMBER_NO = A.MEMBER_NO) AS "COUNTER", MEMBER_PENALTY, MEMBER_DEL_FL FROM ARTIST A LEFT JOIN "MEMBER" M ON (A.MEMBER_NO = M.MEMBER_NO) WHERE ARTIST_REG = 'Y';
commit;
UPDATE "MEMBER" SET MEMBER_PW = (SELECT MEMBER_PW FROM "MEMBER" WHERE MEMBER_NO = 1) WHERE MEMBER_ID = 'artist06';
UPDATE "MEMBER" SET MEMBER_DEL_FL = 'N' WHERE MEMBER_ID = 'artist09';



----------------------------------------------------
-- 송금
CREATE TABLE "WITHDRAW" (
	"WITHDRAW_NO"	NUMBER		NOT NULL,
	"MEMBER_NO"	NUMBER		NOT NULL,
	"BANK_CODE"	VARCHAR2(3)		NOT NULL,
	"WITHDRAW_BANK_NO"	NVARCHAR2(50)		NOT NULL,
	"WITHDRAW_DATE"	DATE	DEFAULT CURRENT_DATE	NOT NULL,
	"WITHDRAW_AMOUNT"	NUMBER		NOT NULL
);

COMMENT ON COLUMN "WITHDRAW"."WITHDRAW_NO" IS '송금번호(SEQ_WITHDRAW_NO)';

COMMENT ON COLUMN "WITHDRAW"."MEMBER_NO" IS '회원번호';

COMMENT ON COLUMN "WITHDRAW"."BANK_CODE" IS '은행코드';

COMMENT ON COLUMN "WITHDRAW"."WITHDRAW_BANK_NO" IS '입금계좌';

COMMENT ON COLUMN "WITHDRAW"."WITHDRAW_DATE" IS '입금일자';

COMMENT ON COLUMN "WITHDRAW"."WITHDRAW_AMOUNT" IS '입금금액';

ALTER TABLE "WITHDRAW" ADD CONSTRAINT "PK_WITHDRAW" PRIMARY KEY (
	"WITHDRAW_NO"
);

ALTER TABLE "WITHDRAW" ADD CONSTRAINT "FK_MEMBER_TO_WITHDRAW_1" FOREIGN KEY (
	"MEMBER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);

ALTER TABLE "WITHDRAW" ADD CONSTRAINT "FK_BANK_CODE_LIST_TO_WITHDRAW_1" FOREIGN KEY (
	"BANK_CODE"
)
REFERENCES "BANK_CODE_LIST" (
	"BANK_CODE"
);

CREATE SEQUENCE SEQ_WITHDRAW_NO NOCACHE;

COMMIT;

--작가명
--판매작품수
--은행명
--계좌번호
--총판매금액
--상태코드
-- 월별 작가들의 매출액, 판매작품수 조회
-- 월별 작가들의 총판매금, 판매작품갯수 조회
SELECT
	P.MEMBER_NO,
	COUNT(*) AS "TYPE1",
	SUM(PAY_AMOUNT) AS "SUM_TYPE1"
FROM
	PIECE P
LEFT JOIN PAYMENT_RECORD PR ON (PR.PIECE_NO = P.PIECE_NO)
WHERE
	TO_CHAR(PR.PAY_DATE, 'YYYY-MM') = '2024-11'
	AND PIECE_TYPE = 1
	AND PIECE_STATUS = 'F'
GROUP BY
    P.MEMBER_NO;
   
SELECT
	P.MEMBER_NO,
	COUNT(*) AS "TYPE2",
	COUNT(CASE WHEN P.PIECE_STATUS = 'D' THEN 1 END) AS "NOT_PAY",
	SUM(END_PRICE) AS "SUM_TYPE2"
FROM
	PIECE P
LEFT JOIN PIECE_AUCTION PA ON (PA.PIECE_NO = P.PIECE_NO)
LEFT JOIN (
	SELECT MAX(END_PRICE) END_PRICE, PIECE_NO
	FROM AUCTION
	GROUP BY PIECE_NO
	) AC ON (AC.PIECE_NO = P.PIECE_NO)
WHERE
	TO_CHAR(END_DATE, 'YYYY-MM') = '2024-11'
	AND PIECE_TYPE = 2
	AND PIECE_STATUS IN ('F', 'D')
GROUP BY
    P.MEMBER_NO;
   
SELECT
	A.MEMBER_NO,
	MEMBER_NAME,
	BANK_CODE,
	(SELECT
		BANK_NAME
	FROM BANK_CODE_LIST BCL
	WHERE BCL.BANK_CODE = A.BANK_CODE
	) AS "BANK_NAME",
	BANK_NO
FROM ARTIST A
LEFT JOIN "MEMBER" M ON M.MEMBER_NO = A.MEMBER_NO;

SELECT MEMBER_NO FROM WITHDRAW;


-- 월별 작가들의 매출액, 판매작품수 조회
--작가명
--판매작품수
--이름
--은행코드
--은행명
--계좌번호
--총판매금액
--상태코드
	--대기 W: 판매된 모든 작품이 입금까지된 작가
	--완료 C: 대기상태의 작가에게 돈을 돌려주고 테이블에 등록한 상태
	--보류 H: 아직 구매한 회원이 입금을 안한경우
SELECT
    A.MEMBER_NO,
    M.MEMBER_NAME,
    A.BANK_CODE,
    BCL.BANK_NAME,
    A.BANK_NO,
    NVL(TYPE1, 0) + NVL(TYPE2, 0) AS "PIECE_COUNT",  -- 판매 작품 수
    NVL(SUM_TYPE1, 0) + NVL(SUM_TYPE2, 0) AS "PRICE_SUM",  -- 총 판매 금액
    (
    CASE "NOT_PAY"
           WHEN 0, A.MEMBER_NO IN (SELECT MEMBER_NO FROM WITHDRAW) THEN 'C'
           WHEN 0, A.MEMBER_NO NOT IN (SELECT MEMBER_NO FROM WITHDRAW) THEN 'W'
           ELSE 'H'
    END AS "PIECE_FL"
    )
FROM
    ARTIST A
LEFT JOIN "MEMBER" M ON A.MEMBER_NO = M.MEMBER_NO
LEFT JOIN BANK_CODE_LIST BCL ON A.BANK_CODE = BCL.BANK_CODE  -- 은행명 조인
LEFT JOIN (
    SELECT
        P.MEMBER_NO,
        COUNT(*) AS "TYPE1",
        SUM(PR.PAY_AMOUNT) AS "SUM_TYPE1"
    FROM PIECE P
    JOIN PAYMENT_RECORD PR ON PR.PIECE_NO = P.PIECE_NO
    WHERE TO_CHAR(PR.PAY_DATE, 'YYYY-MM') = '2024-11'
      AND P.PIECE_TYPE = 1
      AND P.PIECE_STATUS = 'F'
    GROUP BY P.MEMBER_NO
) T1 ON A.MEMBER_NO = T1.MEMBER_NO
LEFT JOIN (
    SELECT
        P.MEMBER_NO,
        COUNT(*) AS "TYPE2",
        COUNT(CASE WHEN P.PIECE_STATUS = 'D' THEN 1 END) AS "NOT_PAY",
        SUM(AC.END_PRICE) AS "SUM_TYPE2"
    FROM PIECE P
    LEFT JOIN PIECE_AUCTION PA ON PA.PIECE_NO = P.PIECE_NO
    LEFT JOIN (
        SELECT MAX(END_PRICE) AS END_PRICE, PIECE_NO
        FROM AUCTION
        GROUP BY PIECE_NO
    ) AC ON AC.PIECE_NO = P.PIECE_NO
    WHERE TO_CHAR(PA.END_DATE, 'YYYY-MM') = '2024-11'
      AND P.PIECE_TYPE = 2
      AND P.PIECE_STATUS IN ('F', 'D')
    GROUP BY P.MEMBER_NO
) T2 ON A.MEMBER_NO = T2.MEMBER_NO
WHERE NVL(TYPE1, 0) + NVL(TYPE2, 0) > 0;  -- 판매 작품 수가 0보다 클 때만 출력



-- 찐 최종
SELECT
	A.ARTIST_NICKNAME,
    A.MEMBER_NO,
    M.MEMBER_NAME,
    A.BANK_CODE,
    BCL.BANK_NAME,
    A.BANK_NO,
    NVL(TYPE1, 0) + NVL(TYPE2, 0) - NVL(NOT_PAY, 0) AS "DEPOSIT_COUNT", -- 입금 작품 수
    NVL(NOT_PAY, 0) AS "UNDEPOSIT_COUNT", -- 입금 작품 수
    NVL(TYPE1, 0) + NVL(TYPE2, 0) AS "ALL-PIECE_COUNT",       -- 판매 작품 수
    NVL(SUM_TYPE1, 0) + NVL(SUM_TYPE2, 0) AS "PRICE_SUM", -- 총 판매 금액
    CASE 
        WHEN NVL(NOT_PAY, 0) = 0 AND A.MEMBER_NO IN (SELECT MEMBER_NO FROM WITHDRAW) THEN 'C'
        WHEN NVL(NOT_PAY, 0) = 0 AND A.MEMBER_NO NOT IN (SELECT MEMBER_NO FROM WITHDRAW) THEN 'W'
        ELSE 'H'
    END AS "PIECE_FL"
FROM
    ARTIST A
LEFT JOIN "MEMBER" M ON A.MEMBER_NO = M.MEMBER_NO
LEFT JOIN BANK_CODE_LIST BCL ON A.BANK_CODE = BCL.BANK_CODE  -- 은행명 조인
LEFT JOIN (
    SELECT
        P.MEMBER_NO,
        COUNT(*) AS "TYPE1",
        SUM(PR.PAY_AMOUNT) AS "SUM_TYPE1"
    FROM PIECE P
    JOIN PAYMENT_RECORD PR ON PR.PIECE_NO = P.PIECE_NO
    WHERE TO_CHAR(PR.PAY_DATE, 'YYYY-MM') = '2024-11'
      AND P.PIECE_TYPE = 1
      AND P.PIECE_STATUS = 'F'
    GROUP BY P.MEMBER_NO
) T1 ON A.MEMBER_NO = T1.MEMBER_NO
LEFT JOIN (
    SELECT
        P.MEMBER_NO,
        COUNT(*) AS "TYPE2",
        COUNT(CASE WHEN P.PIECE_STATUS = 'D' THEN 1 END) AS "NOT_PAY",
        SUM(AC.END_PRICE) AS "SUM_TYPE2"
    FROM PIECE P
    LEFT JOIN PIECE_AUCTION PA ON PA.PIECE_NO = P.PIECE_NO
    LEFT JOIN (
        SELECT MAX(END_PRICE) AS END_PRICE, PIECE_NO
        FROM AUCTION
        GROUP BY PIECE_NO
    ) AC ON AC.PIECE_NO = P.PIECE_NO
    WHERE TO_CHAR(PA.END_DATE, 'YYYY-MM') = '2024-11'
      AND P.PIECE_TYPE = 2
      AND P.PIECE_STATUS IN ('F', 'D')
    GROUP BY P.MEMBER_NO
) T2 ON A.MEMBER_NO = T2.MEMBER_NO
WHERE NVL(TYPE1, 0) + NVL(TYPE2, 0) > 0;  -- 판매 작품 수가 0보다 클 때만 출력
AND A.ARTIST_NICKNAME LIKE '%검색이름%';

COMMIT;
DELETE FROM WITHDRAW WHERE WITHDRAW_NO < 4;
SELECT P.MEMBER_NO FROM PAYMENT_RECORD PR LEFT JOIN PIECE P ON (P.PIECE_NO = PR.PIECE_NO);

SELECT * FROM PIECE WHERE PIECE_STATUS IN ('D', 'F', 'M');
SELECT * FROM PIECE WHERE MEMBER_NO = 9; -- 40 19 21

SELECT * FROM PIECE_AUCTION WHERE PIECE_NO = 21; -- 40 19 21
SELECT * FROM AUCTION WHERE PIECE_NO IN (40, 19, 20) ORDER BY PIECE_NO ASC, BID_DATE ASC;
-- MEMBER_NO 19-12, 40-7
INSERT INTO AUCTION VALUES (SEQ_AUCTION_NO.NEXTVAL, 21, 7, CURRENT_DATE, 46000000);
COMMIT;
SELECT * FROM "MEMBER" WHERE MEMBER_NO IN (14);
UPDATE "MEMBER" SET MEMBER_PENALTY = 1 WHERE MEMBER_NO = 14;

SELECT 
	P.PIECE_NO,
	P.PIECE_TITLE,
	A.ARTIST_NICKNAME,
	(SELECT
		MEMBER_PHONE
	FROM
		"MEMBER" M
	WHERE
		M.MEMBER_NO = P.MEMBER_NO) AS "ARTIST_PHONE",
	(SELECT
		MEMBER_PHONE
	FROM
		"MEMBER" M
	WHERE
		M.MEMBER_NO = ACT.MEMBER_NO) AS "MEMBER_PHONE",
	ACT.END_PRICE
FROM PIECE P
LEFT JOIN ARTIST A ON (A.MEMBER_NO = P.MEMBER_NO)
LEFT JOIN (
	SELECT END_PRICE, PIECE_NO, MEMBER_NO
	FROM AUCTION AC
	WHERE AC.PIECE_NO = 79
	ORDER BY END_PRICE DESC
	FETCH FIRST 1 ROWS ONLY
	) ACT ON (ACT.PIECE_NO = P.PIECE_NO)
WHERE P.PIECE_NO = 79;

SELECT * FROM PIECE_AUCTION WHERE PIECE_NO = 79; -- 20,21

UPDATE "PIECE"
SET PIECE_STATUS = 'F'
WHERE PIECE_NO = 79;
UPDATE PIECE_AUCTION
SET START_DATE = TO_DATE('20241120' , 'YYYYMMDD'),
	END_DATE = TO_DATE('20241121' , 'YYYYMMDD')
WHERE PIECE_NO = 79;
COMMIT;
ROLLBACK;


SELECT
	P.PIECE_NO,
	PIECE_RENAME,
	PIECE_TITLE,
	SIZE_X,
	SIZE_Y,
	(SELECT ARTIST_NICKNAME FROM ARTIST AR WHERE AR.MEMBER_NO = P.MEMBER_NO) AS ARTIST_NICKNAME,
	PIECE_STATUS,
	TO_CHAR(A.END_PRICE, 'FM999,999,999,999,999') AS FINAL_PRICE,
	(TO_CHAR(PA.START_DATE, 'MM/DD(DY)')) AS START_DATE
FROM PIECE P
LEFT JOIN PIECE_AUCTION PA ON (P.PIECE_NO = PA.PIECE_NO)
LEFT JOIN (
		SELECT AC.PIECE_NO, AC.END_PRICE, AC.MEMBER_NO
		FROM AUCTION AC
		JOIN (
		    SELECT PIECE_NO, MAX(END_PRICE) AS MAX_PRICE
		    FROM AUCTION
		    GROUP BY PIECE_NO
			) B ON AC.PIECE_NO = B.PIECE_NO AND AC.END_PRICE = B.MAX_PRICE
	) A ON (P.PIECE_NO = A.PIECE_NO)
WHERE
	PIECE_TYPE = 2
AND P.PIECE_STATUS = 'D'
AND A.MEMBER_NO = 1;

SELECT 
	PR.PIECE_NO,
	P.PIECE_RENAME,
	P.PIECE_TITLE,
	P.PIECE_TYPE,
	(CASE
		WHEN PIECE_TYPE = 1 THEN (TO_CHAR(PR.PAY_DATE, 'MM/DD(DY)'))
		WHEN PIECE_TYPE = 2 THEN (SELECT TO_CHAR(START_DATE, 'MM/DD(DY)') FROM PIECE_AUCTION PA WHERE PA.PIECE_NO = PR.PIECE_NO)
	END
	) AS "REG_DATE",
	TO_CHAR(PR.PAY_AMOUNT, 'FM999,999,999,999,999') AS "FINAL_PRICE",
	P.SIZE_X,
	P.SIZE_Y,
	A.ARTIST_NICKNAME
FROM PAYMENT_RECORD PR
LEFT JOIN PIECE P ON (PR.PIECE_NO = P.PIECE_NO)
LEFT JOIN ARTIST A ON (P.MEMBER_NO = A.MEMBER_NO)
WHERE PR.MEMBER_NO = 1;

	SELECT
		A.ARTIST_NICKNAME,
	    A.MEMBER_NO,
	    M.MEMBER_NAME,
	    A.BANK_CODE,
	    BCL.BANK_NAME,
	    A.BANK_NO,
	    NVL(TYPE1, 0) + NVL(TYPE2, 0) - NVL(NOT_PAY, 0) AS "DEPOSIT_COUNT",
	    NVL(NOT_PAY, 0) AS "UNDEPOSIT_COUNT",
	    NVL(TYPE1, 0) + NVL(TYPE2, 0) AS "ALL_PIECE_COUNT",
	    TO_CHAR(NVL(SUM_TYPE1, 0) + NVL(SUM_TYPE2, 0), 'FM999,999,999,999,999') AS "PRICE_SUM",
	    CASE 
	        WHEN NVL(NOT_PAY, 0) = 0 AND A.MEMBER_NO IN (SELECT MEMBER_NO FROM WITHDRAW) THEN 'C'
	        WHEN NVL(NOT_PAY, 0) = 0 AND A.MEMBER_NO NOT IN (SELECT MEMBER_NO FROM WITHDRAW) THEN 'W'
	        ELSE 'H'
	    END AS "PRICE_FL"
	FROM
	    ARTIST A
	LEFT JOIN "MEMBER" M ON A.MEMBER_NO = M.MEMBER_NO
	LEFT JOIN BANK_CODE_LIST BCL ON A.BANK_CODE = BCL.BANK_CODE
	LEFT JOIN (
	    SELECT
	        P.MEMBER_NO,
	        COUNT(*) AS "TYPE1",
	        SUM(PR.PAY_AMOUNT) AS "SUM_TYPE1"
	    FROM PIECE P
	    JOIN PAYMENT_RECORD PR ON PR.PIECE_NO = P.PIECE_NO
	    WHERE TO_CHAR(PR.PAY_DATE, 'YYYY-MM') = '2024-11'
	      AND P.PIECE_TYPE = 1
	      AND P.PIECE_STATUS = 'F'
	    GROUP BY P.MEMBER_NO
	) T1 ON A.MEMBER_NO = T1.MEMBER_NO
	LEFT JOIN (
	    SELECT
	        P.MEMBER_NO,
	        COUNT(*) AS "TYPE2",
	        COUNT(CASE WHEN P.PIECE_STATUS = 'D' THEN 1 END) AS "NOT_PAY",
	        SUM(AC.END_PRICE) AS "SUM_TYPE2"
	    FROM PIECE P
	    LEFT JOIN PIECE_AUCTION PA ON PA.PIECE_NO = P.PIECE_NO
	    LEFT JOIN (
	        SELECT MAX(END_PRICE) AS END_PRICE, PIECE_NO
	        FROM AUCTION
	        GROUP BY PIECE_NO
	    ) AC ON AC.PIECE_NO = P.PIECE_NO
	    WHERE TO_CHAR(PA.END_DATE, 'YYYY-MM') = '2024-11'
	      AND P.PIECE_TYPE = 2
	      AND P.PIECE_STATUS IN ('F', 'D')
	    GROUP BY P.MEMBER_NO
	) T2 ON A.MEMBER_NO = T2.MEMBER_NO
	WHERE NVL(TYPE1, 0) + NVL(TYPE2, 0) > 0;





SELECT
    M.MEMBER_NO,
    TO_CHAR(M.MEMBER_ID),
    M.MEMBER_PW,
    TO_CHAR(M.MEMBER_NAME),
    TO_CHAR(M.MEMBER_EMAIL),
    TO_CHAR(M.MEMBER_PHONE),
    TO_CHAR(M.MEMBER_PENALTY),
    A.ARTIST_NICKNAME,
    TO_CHAR(A.ARTIST_PROFILE),
    A.ARTIST_REG
FROM "MEMBER" M
LEFT JOIN "ARTIST" A ON M.MEMBER_NO = A.MEMBER_NO
WHERE TO_CHAR(M.MEMBER_ID) = 'manage01'
AND M.MEMBER_DEL_FL = 'N'

UNION ALL

SELECT
    MANAGE_NO AS MEMBER_NO,
    TO_CHAR(MANAGE_ID) AS MEMBER_ID,
    MANAGE_PW AS MEMBER_PW,
    '' AS MEMBER_NAME,
    '' AS MEMBER_EMAIL,
    '' AS MEMBER_PHONE,
    '' AS MEMBER_PENALTY,
    MANAGE_NICKNAME AS ARTIST_NICKNAME,
    '' AS ARTIST_PROFILE,
    'M' AS ARTIST_REG
FROM MANAGE
WHERE TO_CHAR(MANAGE_ID) = 'manage01';  -- 변환 적용;




SELECT 
	P.PIECE_NO,
	P.PIECE_TITLE,
	A.ARTIST_NICKNAME,
	(SELECT
		MEMBER_PHONE
	FROM
		"MEMBER" M
	WHERE
		M.MEMBER_NO = P.MEMBER_NO) AS "ARTIST_PHONE",
	(SELECT
		MEMBER_PHONE
	FROM
		"MEMBER" M
	WHERE
		M.MEMBER_NO = ACT.MEMBER_NO) AS "MEMBER_PHONE",
	TO_CHAR(ACT.END_PRICE, 'FM999,999,999,999,999') AS "END_PRICE"
FROM PIECE P
LEFT JOIN ARTIST A ON (A.MEMBER_NO = P.MEMBER_NO)
LEFT JOIN (
	SELECT END_PRICE, PIECE_NO, MEMBER_NO
	FROM AUCTION AC
	WHERE AC.PIECE_NO = 107
	ORDER BY END_PRICE DESC
	FETCH FIRST 1 ROWS ONLY
	) ACT ON (ACT.PIECE_NO = P.PIECE_NO)
WHERE P.PIECE_NO = 107;

SELECT (
		SELECT COUNT(*)
		FROM "MEMBER"
		WHERE MEMBER_ID = 'hyunj1017')
		+
		(SELECT COUNT(*)
		FROM "MANAGE"
		WHERE MANAGE_ID = 'hyunj1017'
	) FROM DUAL;

SELECT * FROM "MEMBER" WHERE MEMBER_ID LIKE 'hyunj1017%';
DELETE FROM "MEMBER" WHERE MEMBER_ID LIKE 'hyunj1017%';
COMMIT;

UPDATE "MEMBER" SET MEMBER_DEL_FL = 'N' WHERE MEMBER_NO = 40;
UPDATE "MEMBER" SET MEMBER_PENALTY = 1 WHERE MEMBER_NO = 40;
SELECT * FROM ARTIST A LEFT JOIN "MEMBER" M ON (M.MEMBER_NO = A.MEMBER_NO);
SELECT * FROM PIECE_AUCTION WHERE START_DATE > TO_DATE('2024-12-09', 'YYYY-MM-DD');
UPDATE PIECE_AUCTION
SET
	START_DATE = TO_DATE('2024-12-05', 'YYYY-MM-DD'),
	END_DATE = TO_DATE('2024-12-06', 'YYYY-MM-DD')
WHERE PIECE_NO = 176;

SELECT PIECE_NO
FROM PIECE P
LEFT JOIN PIECE_AUCTION PA ON (PA.PIECE_NO = P.PIECE_NO)
